import { baseUrl, defaultErrorMessage } from '../constants';
import { INITIALIZE_AUTH_FAILURE, INITIALIZE_AUTH_REQUEST, INITIALIZE_AUTH_SUCCESS } from '../actionTypes';
import Api from '../api';

const initializeAuthRequest = () => ({
    type: INITIALIZE_AUTH_REQUEST,
});

const initializeAuthSuccess = (user) => ({
    type: INITIALIZE_AUTH_SUCCESS,
    payload: user,
});

const initializeAuthFailure = (errorMessage = defaultErrorMessage) => ({
    type: INITIALIZE_AUTH_FAILURE,
    payload: errorMessage,
    error: true,
});

export const initializeAuth = () => async (dispatch) => {
    if (localStorage.getItem('jwt')) {

        dispatch(initializeAuthRequest());

        try {
            const response = await Api.Auth.current();
            localStorage.setItem('jwt', response.data.user.token);
            dispatch(initializeAuthSuccess(response.data.user));
        } catch (error) {
            localStorage.removeItem('jwt');
            dispatch(initializeAuthFailure(error.response.data.errors));
        }
    }
};


export const signUp = (username, email, password) => async (dispatch) => {

    dispatch({
        type: 'POST_REGISTER_REQUEST',
    });

    const url = `${baseUrl}/users`;
    const options = {
        method: 'POST',
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json;charset=utf-8',
        },
        body: JSON.stringify({ user: { username, email, password } }),
    };

    fetch(url, options)
        .then((response) => response.json())
        .then((result) => {
            if (result.errors) {
                dispatch({
                    type: 'POST_REGISTER_FAILURE',
                    payload: result.errors,
                });
            } else {
                localStorage.setItem('jwt', result.user.token);

                dispatch({
                    type: 'POST_REGISTER_SUCCESS',
                    payload: result.user,
                });
            }
        });
};

export const signIn = (email, password) => async (dispatch) => {

    dispatch({
        type: 'POST_LOGIN_REQUEST',
    });

    const url = `${baseUrl}/users/login`;
    const options = {
        method: 'POST',
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json;charset=utf-8',
        },
        body: JSON.stringify({ user: { email, password } }),
    };

    fetch(url, options)
        .then((response) => response.json())
        .then((result) => {
            if (result.errors) {
                dispatch({
                    type: 'POST_LOGIN_FAILURE',
                    payload: result.errors,
                });
            } else {
                localStorage.setItem('jwt', result.user.token);

                dispatch({
                    type: 'POST_LOGIN_SUCCESS',
                    payload: result.user,
                });
            }
        });
};

export const getProfileFetch = () => async (dispatch) => {

    const token = localStorage.getItem('jwt');

    if (token) {

        dispatch({
            type: 'FETCH_AUTHENTICATION_REQUEST',
        });

        try {
            const url = `${baseUrl}/user`;
            const options = {
                method: 'GET',
                headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json;charset=utf-8',
                    'Authorization': `Token ${token}`,
                },
            };
            const response = await fetch(url, options);
            const result = await response.json();

            dispatch({
                type: 'FETCH_AUTHENTICATION_SUCCESS',
                payload: result.user,
            });
        } catch (error) {
            localStorage.removeItem('jwt');

            dispatch({
                type: 'FETCH_AUTHENTICATION_FAILURE',
                payload: error,
            });
        }

    }
};

export const logoutUser = () => ({
    type: 'LOGOUT_USER',
});