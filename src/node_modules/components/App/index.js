import React, { lazy, Suspense, useEffect } from 'react';
import { connect } from 'react-redux';
import { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';

import Navbar from 'components/Navbar';
import Preloader from 'components/Preloader';
import { initializeAuth } from 'actions/auth';
import { getAuthSelector } from '../../selectors';

import './app.scss';

const Home = lazy(() => import('pages/Home/Home'));
const Article = lazy(() => import('pages/Article/ArticleContainer'));
const Login = lazy(() => import('pages/Login/LoginContainer'));
const Register = lazy(() => import('pages/Register/RegisterContainer'));
const Profile = lazy(() => import('pages/Profile/Profile'));

function App({ initializeAuth, auth }) {

    useEffect(() => {
        initializeAuth();
    }, [initializeAuth]);

    if (auth.isFetching) {
        return <Preloader/>;
    }

    return (
        <Router>
            <header className="header">
                <Navbar isAuthenticated={auth.isAuthenticated} {...auth.currentUser}/>
            </header>
            <Suspense
                fallback={<Preloader/>}
            >
                <Switch>
                    <Route path="/login" component={Login}/>
                    <Route path="/register" component={Register}/>

                    <Route path="/article/:slug" component={Article} exact/>
                    {/*<Route path="/article/new" component={ArticleNew} exact/>
					<Route path="/article/:slug/edit" component={ArticleNew} exact/>*/}

                    <Route path="/@:username" component={Profile}/>
                    {/*<Route path="/@:username/edit" component={Settings} exact/>*/}
                    {/*<Route path="/@:username/favorites" component={Profile} exact/>*/}

                    {/*<Route path="/settings" component={Settings}/>*/}

                    <Route path="/" component={Home} exact/>
                    <Route path="/:pageNumber" component={Home} exact/>

                    <Redirect to="/"/>
                </Switch>
            </Suspense>
        </Router>
    );
}

const mapStateToProps = (state) => ({
    auth: getAuthSelector(state),
});

const mapDispatchToProps = {
    initializeAuth,
};

export default connect(mapStateToProps, mapDispatchToProps)(App);