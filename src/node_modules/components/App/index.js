import React, { useEffect } from 'react';
import { connect } from 'react-redux';
import {
    BrowserRouter as Router,
    Switch,
    Route,
    Redirect,
} from 'react-router-dom';

import Navbar from 'components/Navbar';
import Home from 'pages/Home';
import Login from 'pages/Login';
import Register from 'pages/Register';
import Profile from 'pages/Profile';
import Settings from 'pages/Settings';
import Article from 'pages/Article';
import ArticleEditor from 'pages/ArticleEditor';
import ArticleNew from 'pages/ArticleNew';
import { getProfileFetch } from 'actions/auth';
// import PrivateRoute from 'components/PrivateRoute';

import 'antd/dist/antd.css';
import './app.scss';

function App({ getProfileFetch, isAuthenticated, isFetching, user }) {

    useEffect(() => {
        getProfileFetch();
    }, [getProfileFetch]);

    return (
        <Router>
            <header className="header">
                <Navbar
                    isAuthenticated={isAuthenticated}
                    user={user}
                />
            </header>
            <Switch>
                <Route path="/" component={Home} exact />
                <Route path="/feed" component={Home} />
                <Route path="/login" component={Login} />
                <Route path="/register" component={Register} />

                <Route path="/article" component={Home} exact />
                <Route path="/article/new" component={ArticleNew} exact />
                <Route path="/article/:slug" component={Article} exact />
                <Route path="/article/:slug/edit" component={ArticleNew} exact />

                <Route path="/@:username" component={Profile} exact />
                <Route path="/@:username/edit" component={Settings} exact />
                <Route path="/@:username/favorites" component={Profile} exact />

                <Route path="/settings" component={Settings} />

                <Redirect to="/" />
            </Switch>
        </Router>
    );
}

const mapStateToProps = (state) => ({
    isFetching: state.auth.isFetching,
    isAuthenticated: state.auth.isAuthenticated,
    user: state.auth.user,
});

const mapDispatchToProps = {
    getProfileFetch,
};

export default connect(mapStateToProps, mapDispatchToProps)(App);