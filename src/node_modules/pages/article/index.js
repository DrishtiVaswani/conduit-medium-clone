import React, { useEffect } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { Comment, Avatar, Form, Button, Input } from 'antd';

import Layout from 'components/Layout';
import Author from 'components/Author';
import Like from 'components/Like';
import { fetchArticle, fetchArticleComments } from 'actions/article';

import './article.scss';
import { Link } from 'react-router-dom';

const { TextArea } = Input;

function Article({ match, currentUser, fetchArticle, fetchArticleComments, isFetching, isFetchingComments, data, comments, error }) {

    const { slug } = match.params;

    useEffect(() => {
        fetchArticle(slug);
        fetchArticleComments(slug);
    }, [slug, fetchArticle, fetchArticleComments]);

    const isModify = currentUser && currentUser.username === data.author.username;

    return (
        <Layout>
            {isFetching && isFetchingComments && (
                <div className="loading"></div>
            )}
            {!isFetching && !error && data && (
                <article className="article-single-page">
                    <header className="article-single-heading">
                        <h1 className="article-single-title">{data.title}</h1>
                        <Author {...data.author} createdAt={data.createdAt} />
                        <Like
                            slug={data.slug}
                            favorited={data.favorited}
                            favoritesCount={data.favoritesCount}
                        />
                        {isModify && <Button href={`/article/${data.slug}/edit`}>Редактировать</Button>}
                    </header>
                    <p>{data.body}</p>
                    <footer>
                        <Comment
                            avatar={
                                <Avatar
                                //src={data.author.image}
                                //alt={data.author.username}
                                />
                            }
                            content={
                                <Form>
                                    <Form.Item>
                                        <TextArea />
                                    </Form.Item>
                                    <Form.Item>
                                        <Button
                                            type="primary"
                                            htmlType="submit"
                                        >
                                            Add Comment
                                        </Button>
                                    </Form.Item>
                                </Form>
                            }
                        />
                    </footer>
                </article>
            )}
        </Layout>
    );
}

Article.propTypes = {
    fetchArticle: PropTypes.func.isRequired,
    fetchArticleComments: PropTypes.func.isRequired,
    isFetching: PropTypes.bool.isRequired,
    isFetchingComments: PropTypes.bool.isRequired,
    data: PropTypes.object.isRequired,
    comments: PropTypes.array.isRequired,
};

const mapStateToProps = (state) => ({
    isFetching: state.article.isFetching,
    isFetchingComments: state.article.isFetchingComments,
    data: state.article.data,
    comments: state.article.comments,
    error: state.article.error,
    currentUser: state.auth.user,
});

const mapDispatchToProps = {
    fetchArticle,
    fetchArticleComments,
};

export default connect(mapStateToProps, mapDispatchToProps)(Article);