import React, { useEffect } from 'react';
import { connect } from 'react-redux';
import { NavLink, Switch, Route } from 'react-router-dom';
import classNames from 'classnames';
import { Avatar, Button, Pane, Tablist, Tab } from 'evergreen-ui';

import { fetchProfile, follow, unfollow } from 'actions/profile';
import { fetchArticlesByAuthor } from 'actions/articles';
import Layout from 'components/Layout';
import Article from 'components/Article';

import './profile.scss';

function Profile({ match, fetchProfile, fetchArticlesByAuthor, isFetching, profile, currentUser, follow, unfollow, articles }) {

    const { url, params } = match;
    const { username } = params;
    const isUser = currentUser && currentUser.username === profile.username;

    useEffect(() => {
        document.title = `${username} - medium`;
    }, [username]);

    const handleFollowAndUnfollowClick = (event) => {
        event.preventDefault();
        if (profile.following) {
            unfollow(profile.username);
        } else {
            follow(profile.username);
        }
    };

    useEffect(() => {
        fetchProfile(username);
        fetchArticlesByAuthor(username);
    }, [fetchProfile, fetchArticlesByAuthor, username]);

    const classes = classNames('button', {
        'primary': !profile.following,
        'default': profile.following,
    });

    if (isFetching) {
        return (
            <div className="loading"></div>
        );
    }

    return (
        <Layout>
            <section className="profile">

                <div className="user">
                    <div className="user-thumbnail">
                        <Avatar
                            isSolid
                            color="green"
                            name={profile.username}
                            src={profile.image}
                            alt={profile.username}
                            size={150}
                        />
                    </div>

                    <div className="user-body">
                        <h1>{profile.username}</h1>
                        <p>{profile.bio}</p>
                        {isUser ? (
                            <Button
                                is="a"
                                href={`/@${profile.username}/edit`}
                                iconBefore="edit"
                                appearance="primary"
                                intent="success"
                            >
                                Редактировать профиль
                            </Button>
                        ) : (
                                <button
                                    className={classes}
                                    type="button"
                                    onClick={handleFollowAndUnfollowClick}
                                >
                                    {profile.following ? 'Unfollow' : 'Follow'}
                                </button>
                            )}
                    </div>
                </div>

                <div className="articles">

                    <Pane height={120}>
                        <Tablist marginBottom={16} flexBasis={240} marginRight={24}>
                            <Tab
                            >
                                tab1
                            </Tab>
                        </Tablist>
                    </Pane>


                    <div className="articles-heading">

                    </div>
                    <ul className="tabs">
                        <li className="tabs-item">
                            <NavLink className="tabs-link" to={`${url}`} exact>Мои статьи</NavLink>
                        </li>
                        <li className="tabs-item">
                            <NavLink className="tabs-link" to={`${url}/favorites`}>Любимые статьи</NavLink>
                        </li>
                    </ul>
                    <div className="articles-list">
                        <Switch>
                            <Route path={`${url}`} exact>
                                {articles.map((article) => (
                                    <Article key={article.slug} {...article} />
                                ))}
                            </Route>
                            <Route path={`${url}/favorites`}>
                                favorites
                            </Route>
                        </Switch>
                    </div>
                </div>
            </section>
        </Layout>
    );
}

const mapStateToProps = (state) => ({
    isFetching: state.profile.isFetching,
    profile: state.profile,
    currentUser: state.auth.user,
    articles: state.articles.articles,
});

const mapDispatchToProps = {
    fetchProfile,
    follow,
    unfollow,
    fetchArticlesByAuthor,
};

export default connect(mapStateToProps, mapDispatchToProps)(Profile);