import {
    CREATE_COMMENT_FAILURE,
    CREATE_COMMENT_REQUEST,
    CREATE_COMMENT_SUCCESS,
    DELETE_COMMENT_FAILURE,
    DELETE_COMMENT_SUCCESS,
    DELETE_COMMENT_REQUEST,
    FETCH_ARTICLE_FAILURE,
    FETCH_ARTICLE_REQUEST,
    FETCH_ARTICLE_SUCCESS,
    FETCH_COMMENTS_FAILURE,
    FETCH_COMMENTS_REQUEST,
    FETCH_COMMENTS_SUCCESS,
} from './actionTypes';
import { defaultErrorMessage } from 'pages/Article/constants';
import Api from 'api';

const articleRequest = () => ({
    type: FETCH_ARTICLE_REQUEST,
});

const articleSuccess = (article) => ({
    type: FETCH_ARTICLE_SUCCESS,
    payload: article,
});

const articleFailure = (errorMessage = defaultErrorMessage) => ({
    type: FETCH_ARTICLE_FAILURE,
    payload: errorMessage,
    error: true,
});

export const fetchArticle = (slug) => (dispatch) => {

    dispatch(articleRequest());

    Api.Articles.get(slug)
        .then((result) => {
            dispatch(articleSuccess(result.data));
        })
        .catch((error) => {
            dispatch(articleFailure(error.message));
        });
};

const commentsRequest = () => ({
    type: FETCH_COMMENTS_REQUEST,
});

const commentsSuccess = (comments) => ({
    type: FETCH_COMMENTS_SUCCESS,
    payload: comments,
});

const commentsFailure = (errorMessage = defaultErrorMessage) => ({
    type: FETCH_COMMENTS_FAILURE,
    payload: errorMessage,
    error: true,
});

export const fetchComments = (slug) => (dispatch) => {

    dispatch(commentsRequest());

    Api.Comments.forArticle(slug)
        .then((result) => {
            dispatch(commentsSuccess(result.data));
        })
        .catch((error) => {
            dispatch(commentsFailure(error.message));
        });
};

const createCommentRequest = () => ({
    type: CREATE_COMMENT_REQUEST,
});

const createCommentSuccess = (comment) => ({
    type: CREATE_COMMENT_SUCCESS,
    payload: comment,
});

const createCommentFailure = (errorMessage = defaultErrorMessage) => ({
    type: CREATE_COMMENT_FAILURE,
    payload: errorMessage,
});

export const createComment = (slug, comment) => (dispatch) => {

    dispatch(createCommentRequest());

    Api.Comments.create(slug, comment)
        .then((result) => {
            console.log(result);
            dispatch(createCommentSuccess(result.data));
        })
        .catch((error) => {
            dispatch(createCommentFailure(error.message));
        });
};

const deleteCommentRequest = () => ({
    type: DELETE_COMMENT_REQUEST,
});

const deleteCommentSuccess = (comment) => ({
    type: DELETE_COMMENT_SUCCESS,
    payload: comment,
    error: true,
});

const deleteCommentFailure = (errorMessage = defaultErrorMessage) => ({
    type: DELETE_COMMENT_FAILURE,
});

export const deleteComment = (slug, commentId) => async (dispatch) => {

    dispatch(deleteCommentRequest);

    try {
        const response = await Api.Comments.delete(slug, commentId);

        dispatch(deleteCommentSuccess(commentId, response));
    } catch (error) {
        dispatch(deleteCommentFailure(error.message));
    }
};