import {
    CREATE_COMMENT_FAILURE,
    CREATE_COMMENT_REQUEST,
    CREATE_COMMENT_SUCCESS,
    DELETE_COMMENT_FAILURE,
    DELETE_COMMENT_REQUEST,
    DELETE_COMMENT_SUCCESS,
    FETCH_COMMENTS_FAILURE,
    FETCH_COMMENTS_REQUEST,
    FETCH_COMMENTS_SUCCESS,
} from 'pages/Article/actionTypes';

const initialState = {
    isFetching: false,
    createIsFetching: false,
    deleteIsFetching: false,
    data: [],
    errorMessage: null,
    createErrorMessage: null,
    deleteErrorMessage: null,
};

export default (state = initialState, { type, payload }) => {

    switch (type) {
        case FETCH_COMMENTS_REQUEST:
            return { ...state, isFetching: true, errorMessage: null };
        case FETCH_COMMENTS_SUCCESS:
            return { ...state, isFetching: false, data: payload.comments };
        case FETCH_COMMENTS_FAILURE:
            return { ...state, isFetching: false, errorMessage: payload };

        case CREATE_COMMENT_REQUEST:
            return { ...state, createIsFetching: true, createErrorMessage: null };
        case CREATE_COMMENT_SUCCESS:
            return {
                ...state,
                createIsFetching: false,
                data: [payload.comment].concat(state.data),
            };
        case CREATE_COMMENT_FAILURE:
            return { ...state, createIsFetching: false, createErrorMessage: payload };

        case DELETE_COMMENT_REQUEST:
            return { ...state, deleteIsFetching: true, deleteErrorMessage: null };
        case DELETE_COMMENT_SUCCESS:
            return {
                ...state,
                deleteIsFetching: false,
                data: state.data.filter((comment) => comment.id !== payload),
            };
        case DELETE_COMMENT_FAILURE:
            return { ...state, deleteIsFetching: false, deleteErrorMessage: payload };
        default:
            return state;
    }

};