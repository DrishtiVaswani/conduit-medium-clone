import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { Button, TagInput, Textarea, TextInput } from 'evergreen-ui'

import Layout from 'components/Layout';
import { submitCreatedArticle } from 'actions/articles';
import { fetchArticle } from 'actions/article';

import './article-new.scss';

function ArticleNew({ match, fetchArticle, submitCreatedArticle, isFetching, article, }) {

    const [title, setTitle] = useState('');
    const [summary, setSummary] = useState('');
    const [fullContent, setFullContent] = useState('');
    const [tagList, setTagList] = useState(['Kauri', 'Willow']);

    const { slug } = match.params;

    useEffect(() => {
        if (slug) {
            fetchArticle(slug);
        }
    }, [slug, fetchArticle]);

    useEffect(() => {
        document.title = `Новая статья - medium`;
    });

    const handleSubmit = (event) => {
        event.preventDefault();

        const article = {
            title,
            description: summary,
            body: fullContent,
            tagList
        };

        submitCreatedArticle(article);

        console.log(article);
    };

    return (
        <Layout>
            {isFetching && (
                <div className="loading"></div>
            )}
            <section className="article-new">
                <div className="article-new-heading">
                    <h1>Новая статья</h1>
                </div>

                <form onSubmit={handleSubmit}>
                    <div>
                        <TextInput
                            required
                            type="text"
                            placeholder="Название"
                            width="100%"
                            height={40}
                            value={title}
                            onChange={(e) => setTitle(e.target.value)}
                        />
                    </div>

                    <div>
                        <TextInput
                            required
                            type="text"
                            placeholder="Краткое содержание..."
                            width="100%"
                            height={40}
                            value={summary}
                            onChange={(e) => setSummary(e.target.value)}
                        />
                    </div>

                    <div>
                        <Textarea
                            required
                            name="full-content"
                            placeholder="Полное содержание..."
                            value={fullContent}
                            onChange={(e) => setFullContent(e.target.value)}
                            width="100%"
                            height="150px"
                        />
                    </div>

                    <div>
                        <TagInput
                            required
                            inputProps={{ placeholder: 'Add trees...' }}
                            values={tagList}
                            onChange={(tags) => setTagList([...tags])}
                            width="100%"
                            height={40}
                        />
                    </div>

                    <Button
                        type="submit"
                        appearance="primary"
                        isLoading={isFetching}
                        height={40}
                    >
                        Опубликовать
                    </Button>
                </form>
            </section>
        </Layout>
    );
}

ArticleNew.propTypes = {
    fetchArticle: PropTypes.func.isRequired,
    submitCreatedArticle: PropTypes.func.isRequired,
    isFetching: PropTypes.bool.isRequired,
    article: PropTypes.object.isRequired,
};

const mapStateToProps = (state) => ({
    isFetching: state.article.isFetching,
    error: state.article.error,
    article: state.article.data,
});

const mapDispatchToProps = {
    fetchArticle,
    submitCreatedArticle,
};

export default connect(mapStateToProps, mapDispatchToProps)(ArticleNew);