import React, { useEffect } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { Form, Input, Select, Button } from 'antd';

import Layout from 'components/Layout';
import { submitCreatedArticle } from 'actions/articles';
import { fetchArticle } from 'actions/article';

import './article-new.scss';

const { TextArea } = Input;

function ArticleNew({ match, fetchArticle, submitCreatedArticle, isFetching, article, }) {

    const { slug } = match.params;

    useEffect(() => {
        if (slug) {
            fetchArticle(slug);
        }
    }, [slug, fetchArticle]);

    useEffect(() => {
        document.title = `Новая статья - medium`;
    });

    const handleSubmitSuccess = (values) => {
        submitCreatedArticle(values);
    };

    const handleSubmitFailure = (error) => {
        console.log('error', error);
    };

    return (
        <Layout>
            {isFetching && (
                <div className="loading"></div>
            )}
            <section className="article-new">
                <div className="article-new-heading">
                    <h1>Новая статья</h1>
                </div>
                <Form
                    onFinish={handleSubmitSuccess}
                    onFinishFailed={handleSubmitFailure}
                >
                    <Form.Item
                        name="title"
                        rules={[{ required: true, message: 'Пожалуйста, введите название!' }]}
                        value={article.title && 'dasdasdasdasdasd'}
                    >
                        <Input
                            allowClear
                            placeholder="Название"
                        />
                    </Form.Item>
                    <Form.Item
                        name="description"
                        rules={[{ required: true, message: 'Пожалуйста, введите краткое содержание!' }]}
                        value="dqwdqwdqwdqw"
                    >
                        <Input
                            allowClear
                            value="dqwdqwdqwdqw"
                            placeholder="Краткое содержание"
                        />
                    </Form.Item>
                    <Form.Item
                        name="body"
                        rules={[{ required: true, message: 'Пожалуйста, введите полное содержание!' }]}
                    >
                        <TextArea
                            allowClear
                            autoSize={{ minRows: 6 }}
                            placeholder="Полное содержание"
                        />
                    </Form.Item>
                    <Form.Item
                        name="tagList"
                        rules={[{ required: true, message: 'Пожалуйста, введите теги!' }]}
                    >
                        <Select
                            mode="tags"
                            style={{ width: '100%' }}
                            placeholder="Теги"
                        />
                    </Form.Item>
                    <Form.Item
                        style={{ textAlign: 'right' }}
                    >
                        <Button
                            type="primary"
                            //loading
                            size="large"
                            htmlType="submit"
                        >
                            Опубликовать
                        </Button>
                    </Form.Item>
                </Form>
            </section>
        </Layout>
    );
}

ArticleNew.propTypes = {
    fetchArticle: PropTypes.func.isRequired,
    submitCreatedArticle: PropTypes.func.isRequired,
    isFetching: PropTypes.bool.isRequired,
    article: PropTypes.object.isRequired,
};

const mapStateToProps = (state) => ({
    isFetching: state.article.isFetching,
    error: state.article.error,
    article: state.article.data,
});

const mapDispatchToProps = {
    fetchArticle,
    submitCreatedArticle,
};

export default connect(mapStateToProps, mapDispatchToProps)(ArticleNew);
